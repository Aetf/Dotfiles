# Helper function
uniqappend () {
    varname=$1
    x=$2
    case ":${!varname}:" in
        *":$x:"*) :;; # already there
        *) eval $varname=\"\$$varname:\$x\";;
    esac
    eval $varname=\"\$\{$varname\#:\}\"
}
uniqprepend () {
    varname=$1
    x=$2
    case ":${!varname}:" in
        *":$x:"*) :;; # already there
        *) eval $varname=\"\$x:\$$varname\";;
    esac
    eval $varname=\"\$\{$varname\%:\}\"
}

# Remove duplicate and nonexist entries
if [ -n "$PATH" ]; then
    old_PATH=$PATH:; PATH=
    while [ -n "$old_PATH" ]; do
        x=${old_PATH%%:*}       # the first remaining entry
        if [ -d "$x" ]; then
            uniqappend PATH $x
        fi
        old_PATH=${old_PATH#*:}
    done
    unset old_PATH x
fi
if [ -n "${LD_LIBRARY_PATH:=}" ]; then
    old_PATH=$LD_LIBRARY_PATH:; LD_LIBRARY_PATH=
    while [ -n "$old_PATH" ]; do
        x=${old_PATH%%:*}       # the first remaining entry
        if [ -d "$x" ]; then
            uniqappend LD_LIBRARY_PATH $x
        fi
        old_PATH=${old_PATH#*:}
    done
    unset old_PATH x
fi

# Basic locations
export DOWNLOAD_DIR=$HOME/downloads
export BUILD_DIR=$HOME/buildbed
export TOOL_DIR=$HOME/tools

# Extra Path
if [ -d $HOME/.local/bin ]; then
    uniqprepend PATH $HOME/.local/bin
fi

# Detect extra installations in tools
AUTO_DETECT=true
if $AUTO_DETECT; then
    INCLUDE=${INCLUDE:-}
    LIB=${LIB:-}
    LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-}
    PATH=${PATH:-}
    PKG_CONFIG_PATH=${PKG_CONFIG_PATH:-}
    for pkg in $TOOL_DIR/*; do
        case $pkg in
            *.skip)
                continue;;
        esac
        inc_dir=$pkg/include
        bin_dir=$pkg/bin
        lib_dir=$pkg/lib
        lib64_dir=$pkg/lib64
        if [ -d $inc_dir ]; then
            uniqprepend INCLUDE $inc_dir
            uniqprepend CPATH $inc_dir
        fi
        if [ -d $bin_dir ]; then
            uniqprepend PATH $bin_dir
        fi
        if [ -d $lib_dir ]; then
            uniqprepend LD_LIBRARY_PATH $lib_dir
            uniqprepend LIB $lib_dir
        fi
        if [ -d $lib64_dir ]; then
            uniqprepend LD_LIBRARY_PATH $lib64_dir
            uniqprepend LIB $lib64_dir
        fi

        for cmake_dir in $pkg/share/*/cmake; do
            if [ -d $cmake_dir ]; then
                uniqprepend CMAKE_PREFIX_PATH $pkg
            fi
        done
        for pkgconfig_dir in $pkg/lib*/pkgconfig; do
            if [ -d $pkgconfig_dir ]; then
                uniqprepend PKG_CONFIG_PATH $pkgconfig_dir
            fi
        done
    done
    export PATH
    export LD_LIBRARY_PATH
    export INCLUDE
    export CPATH
    export LIB
    export CMAKE_PREFIX_PATH
    export PKG_CONFIG_PATH
fi

# Package specific variables
export JAVA_HOME=/usr/lib/jvm/java-8-oracle
CUDA_HOME=/usr/local/cuda
if [[ -d $CUDA_HOME ]]; then
    export CUDA_HOME
    export CUDA_ROOT=$CUDA_HOME
    uniqprepend PATH $CUDA_HOME/bin
    uniqprepend LD_LIBRARY_PATH $CUDA_HOME/lib64
    uniqprepend INCLUDE $CUDA_HOME/include
    uniqprepend CPATH $CUDA_HOME/include
    uniqprepend LIB $CUDA_HOME/lib64
fi

# compile time library path list
export LIBRARY_PATH=$LD_LIBRARY_PATH

# set compiler to gcc and g++
export CC=gcc
export CXX=g++

# Go language
export GOROOT=$TOOL_DIR/go
export GOPATH=$TOOL_DIR/gopath
export GOBIN=$TOOL_DIR/gopath/bin

# If not running interactively, exit after setting up paths
[[ $- != *i* ]] && return

#------------------------------------------------------------
# Following section only applies to an interactive session
#------------------------------------------------------------
export TERM=xterm-256color

# Fix Ctrl+Left/Right to move around words
bind '"\e[1;5D":backward-word'
bind '"\e[1;5C":forward-word'

# Alias
alias ls='ls --color=auto -h -v --indicator-style=classify'
alias ll='ls -l'
alias la='ls -a'
alias lla='ls -al'
alias bd=". bd -si"
alias kfg="kill -- -\$(jobs -p); fg"
alias htop="TERM=screen htop"
function cdmk() {
    mkdir -p "$@"
    cd $1
}

# Editor
export EDITOR=vim

# liquid prompt
if [[ -d ~/.local/liquidprompt ]]; then
    PS1='PS1' # fix warning in liquidprompt due to PS1 is empty
    ## disable vcs on large repo
    LP_DISABLED_VCS_PATH="$BUILD_DIR/incudator-mxnet:$BUILD_DIR/models:$BUILD_DIR/tensorflow:$HOME/.vim/plugged/YouCompleteMe"
    . ~/.local/liquidprompt/liquidprompt
    ## Set tmux tab title when we are ssh in an interactive session
    if [[ -n $TMUX ]]; then
        LP_TITLE_OPEN='\033k'
        LP_TITLE_CLOSE='\033\\'
    fi
    #PROMPT_COMMAND="$PROMPT_COMMAND ; PS1=\$(_lp_title \${HOSTNAME}: \${PWD##*/})\$PS1"
fi

# Spack package manager
export SPACK_ROOT=$HOME/.local/spack
PATH=$PATH:$SPACK_ROOT/bin
# don't load shell integration, which is too slow. We explicitly set MODULEPATH
# common used modules are loaded as spack view in $TOOL_DIR/spack_packages
#. $SPACK_ROOT/share/spack/setup-env.sh
#export MODULEPATH=$TOOL_DIR/spack/share/spack/lmod/linux-rhel7-ppc64le/Core:/gpfs/gpfs0/software/rhel72/conflux-modules/modulefiles

# Make SSH_AUTH_SOCK points to a fixed location
if [[ -n $SSH_AUTH_SOCK && ! -h $SSH_AUTH_SOCK ]]; then
    mkdir -p $HOME/.ssh
    ln -sf $SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock
    export SSH_AUTH_SOCK=$HOME/.ssh/ssh_auth_sock
elif [[ -z $SSH_AUTH_SOCK ]]; then
    export SSH_AUTH_SOCK=$HOME/.ssh/ssh_auth_sock
fi

# Disable TTY XON/XOFF
stty -ixon

# Automatically update window size
shopt -s checkwinsize
