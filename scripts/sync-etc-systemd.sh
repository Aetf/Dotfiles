#! /bin/sh

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_user=off

print_help ()
{
	printf 'Usage: %s [--(no-)user] <src> <dest>\n' "$0"
	printf "\t%s\n" "<src>: source path"
	printf "\t%s\n" "<dest>: destination path"
	printf "\t%s\n" "--user,--no-user: Run in user mode (off by default)"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--no-user|--user)
				_arg_user="on"
				test "${1:0:5}" = "--no-" && _arg_user="off"
				;;
			*)
				_positionals+=("$1")
				;;
		esac
		shift
	done
}


handle_passed_args_count ()
{
	_required_args_string="'src' and 'dest'"
	test ${#_positionals[@]} -lt 2 && _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${#_positionals[@]}." 1
	test ${#_positionals[@]} -gt 2 && _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
}

assign_positional_args ()
{
	_positional_names=('_arg_src' '_arg_dest' )

	for (( ii = 0; ii < ${#_positionals[@]}; ii++))
	do
		eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args

### END OF CODE GENERATED BY Argbash (sortof) ### ])

echo "Syncing $_arg_src to $_arg_dest"
cp $_arg_src/*.{service,socket,device,mount,automount,swap,target,path,timer,snapshot,slice,scope} $_arg_dest

#sleep a second before reload
sleep 1

echo "Daemon-reload"
user_flag=
if [[ $_arg_user == "on" ]]; then
    user_flag="--user"
fi
systemctl $user_flag daemon-reload

echo "Done"
